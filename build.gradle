plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    // node 베이스의 코드들을 빌드할 수 있는 플러그인
    id "com.github.node-gradle.node" version "3.3.0"
}

group = 'com.fastcampus'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

/**
 * node download 여부 및 버전
*/
node {
    nodeModulesDir = file("$projectDir/front-end")
    version = '18.3.0'
    download = true
}

/**
 * react build 할 때 사용하는 툴(npm)을 실행하겠다.
 */
task npmBuild(type: NpmTask) {
    args = ['run', "build"]
}

/**
 * build 된 파일을 저장 되어있는 from 에서 into 에 넣겠다. (copy)
 */
task copyFrontEnd(type: Copy) {
    from "$projectDir/front-end/static"
    into 'build/resources/main/static/.'
}

/**
 * clean 이 일어날 때 빌드 된 프론트 모듈도 삭제하겠다.
 */
task cleanFrontEnd(type: Delete) {
    delete "$projectDir/front-end/static", "$projectDir/front-end/node_modules"
}

npmBuild.dependsOn npmInstall
copyFrontEnd.dependsOn npmBuild
compileJava.dependsOn copyFrontEnd

clean.dependsOn cleanFrontEnd